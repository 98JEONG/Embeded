{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# -*- coding: utf-8 -*-\n",
    "\"\"\"\n",
    "Created on Tue Dec  3 23:51:25 2019\n",
    "\n",
    "@author: sejeong\n",
    "\"\"\"\n",
    "import paho.mqtt.publish as publish\n",
    "import RPi.GPIO as GPIO\n",
    "import numpy as np\n",
    "import time\n",
    "#import random\n",
    "from random import random,randrange,randint\n",
    "import smbus #MPU6050에서 사용\n",
    "import math\n",
    "import threading\n",
    "\n",
    "mode=0#난이도\n",
    "\n",
    "IRpin = 21#적외선 GPIO핀 \n",
    "ButtonPin = [17,27,22] #버튼 GPIO핀\n",
    "LedPin = [5,6,13]#LED GPIO핀\n",
    "PiezoPin = 12#부저 GPIO핀\n",
    "GHPin = 18#조도 GPIO핀\n",
    "\n",
    "LedOn = [False,False,False]#현재 켜져있는 LED\n",
    "\n",
    "#ADC를 사용하기 위한 핀\n",
    "\n",
    "SPICLK = 11\n",
    "SPIMISO = 9\n",
    "SPIMOSI = 10\n",
    "SPICS = 9\n",
    "\n",
    "bus = smbus.SMBus(1)#i2c 인터페이스 디바이스 객체 생성\n",
    "address = 0x68\n",
    "\n",
    "Question = []\n",
    "Bomb = []#폭탄을 해체했는지(True) 아닌지(False)\n",
    "scale = [261,329,196]#도,미,솔\n",
    "timer = None\n",
    "\n",
    "#핀 세팅\n",
    "def initSetting():\n",
    "    GPIO.setmode(GPIO.BCM)\n",
    "    GPIO.setup(IRpin,GPIO.IN)\n",
    "    GPIO.setup(GHPin,GPIO.IN)\n",
    "    GPIO.setup(ButtonPin[0],GPIO.IN,pull_up_down=GPIO.PUD_UP)\n",
    "    GPIO.setup(ButtonPin[1],GPIO.IN,pull_up_down=GPIO.PUD_UP)\n",
    "    GPIO.setup(ButtonPin[2],GPIO.IN,pull_up_down=GPIO.PUD_UP)\n",
    "    GPIO.setup(LedPin[0],GPIO.OUT)\n",
    "    GPIO.setup(LedPin[1],GPIO.OUT)\n",
    "    GPIO.setup(LedPin[2],GPIO.OUT)\n",
    "    GPIO.setup(PiezoPin,GPIO.OUT)\n",
    "    \n",
    "def clearSetting():\n",
    "    GPIO.output(LedPin[0],GPIO.LOW)\n",
    "    GPIO.output(LedPin[1],GPIO.LOW)\n",
    "    GPIO.output(LedPin[2],GPIO.LOW)\n",
    "    GPIO.output(PiezoPin,GPIO.OUT)\n",
    "\n",
    "def menuSelect():\n",
    "    global mode\n",
    "    while True:\n",
    "        menu = int(input(\"1)쉬움 2)중간 3)어려움 4)종료 >>\"))\n",
    "        if menu !=4 :\n",
    "            publish.single(\"embedded/mqtt/project\",\"PLAY\",hostname=\"test.mosquitto.org\")#mqtt서버에 연결\n",
    "            mode = menu\n",
    "            break\n",
    "        elif menu == 4:\n",
    "            #종료\n",
    "            print(\"게임을 종료합니다...\")\n",
    "            break\n",
    "        else:\n",
    "            print(\"다시 선택\")\n",
    "            \n",
    "def makeAnswer(size):\n",
    "    #총 답의 size\n",
    "    answer = []\n",
    "    for i in range(0,size):\n",
    "        answer.append(random())\n",
    "    answer = np.array(answer) < 0.5\n",
    "    return answer\n",
    "\n",
    " \n",
    "def makeGame(size):\n",
    "    #사용할 센서의 종류를 선택한다\n",
    "    #size만큼의 센서를 선택함 (0<size<=5)\n",
    "    global Bomb\n",
    "    index = []\n",
    "    game = []\n",
    "    for i in range(size):\n",
    "        while True:\n",
    "            rand = randint(0,len(Question)-1)\n",
    "            if (rand not in index):\n",
    "                index.append(rand)\n",
    "                game.append(Question[rand])\n",
    "                Bomb.append(False)\n",
    "                break\n",
    "    return game\n",
    "\n",
    "    \n",
    "def InfraredRay(size):\n",
    "    #적외선센서\n",
    "    answer = makeAnswer(size)#사이즈만큼의 정답을 만든다\n",
    "    user = []\n",
    "    while True:\n",
    "        for i in range(size):\n",
    "            a = GPIO.input(IRpin)#적외선센서의 input값을 받아온다\n",
    "            time.sleep(1)\n",
    "            user.append(a)\n",
    "            #문제를 푸는 사람이 입력한 값을 저장한다\n",
    "        check = True\n",
    "        for i in range(size): \n",
    "            if answer[i] == user[i]:\n",
    "                #정답인 경우\n",
    "                print(\"■ \",end='')\n",
    "            else:\n",
    "                #오답인 경우\n",
    "                check = False\n",
    "                print(\"□ \",end='')\n",
    "            if(mode == 3):\n",
    "                #어려움 난이도 일 때\n",
    "                condition = GPIO.input(GHPin)#조도센서의 값을 가져온다\n",
    "                set_condition = random()<random()#조도센서가 어떤 값을 가져야 하는지에 대한 조건\n",
    "                #만약 조도센서의 조건도 만족시켜줘야함\n",
    "                if condition != set_condition:\n",
    "                    check=False\n",
    "        if check:\n",
    "            break#모두 정답이므로 종료\n",
    "            \n",
    "\n",
    "#아래  함수는 MPU6050에서 사용        \n",
    "def get_y_rotation(x,y,z):\n",
    "    radians = math.atan2(x, dist(y,z))\n",
    "    return -math.degrees(radians)\n",
    " \n",
    "def get_x_rotation(x,y,z):\n",
    "    radians = math.atan2(y, dist(x,z))\n",
    "    return math.degrees(radians)\n",
    "\n",
    "def read_word(adr):\n",
    "    high = bus.read_byte_data(address,adr)\n",
    "    low = bus.read_byte_data(address,adr+1)\n",
    "    val = (high << 8) + low\n",
    "    return val\n",
    "\n",
    "def read_word_2c(adr):\n",
    "    val = read_word(adr)\n",
    "    if val>=0x8000:\n",
    "        return -((65535-val)+1)\n",
    "    else:\n",
    "        return val\n",
    "    \n",
    "def dist(a,b):\n",
    "    return math.sqrt((a*a)+(b*b))\n",
    "\n",
    " \n",
    "def MPU6050(size):\n",
    "    #Gyro/Acc 센서\n",
    "    print(\"MPU\")\n",
    "    #i2c\n",
    "    power_mgmt_1 = 0x6b\n",
    "    power_mgmt_2 = 0x6c\n",
    "    address = 0x68    \n",
    "    bus.write_byte_data(address, power_mgmt_1, 0) #초기화?인거같던데 잘 모르겟\n",
    "    #임의로 정답의 x, y값 지정(범위를 모르겠음_범위 수정 필요)\n",
    "    #문제 예시 : x값을 100(random)이상으로 만드시오\n",
    "    answerX = randrange(1,180);\n",
    "    answerY = randrange(1,180);\n",
    "\n",
    "    #sub이 맞춰야할 조건을 pub에게 보여줌\n",
    "    choice=[\"이상\",\"이하\"]  \n",
    "    case1 = choice[randrange(0,2)]\n",
    "    case2 = choice[randrange(0,2)]\n",
    "    print(\"x값은 %f %s(으)로, y값은 %f %s(으)로 맞춰주십시오.\"% (answerX,case1,answerY,case2));\n",
    "    count=0#임시변수\n",
    "    while True:\n",
    "    #각속도(gyro) 데이터\n",
    "        gyro_xout = read_word_2c(0x43)\n",
    "        gyro_yout = read_word_2c(0x45)\n",
    "        gyro_zout = read_word_2c(0x47)\n",
    "    #출력 확인용\n",
    "    #print (\"gyro_xout: \", gyro_xout, \" scaled: \", (gyro_xout / 131))\n",
    "    #print (\"gyro_yout: \", gyro_yout, \" scaled: \", (gyro_yout / 131))\n",
    "    #print (\"gyro_zout: \", gyro_zout, \" scaled: \", (gyro_zout / 131))\n",
    "\n",
    " \n",
    "    #가속도(acc) 데이터\n",
    "        accel_xout = read_word_2c(0x3b)\n",
    "        accel_yout = read_word_2c(0x3d)\n",
    "        accel_zout = read_word_2c(0x3f)\n",
    "\n",
    "        accel_xout_scaled = accel_xout / 16384.0\n",
    "        accel_yout_scaled = accel_yout / 16384.0\n",
    "        accel_zout_scaled = accel_zout / 16384.0\n",
    "\n",
    "    #출력 확인용\n",
    "    #print (\"accel_xout: \", accel_xout, \" scaled: \", accel_xout_scaled)\n",
    "    #print (\"accel_yout: \", accel_yout, \" scaled: \", accel_yout_scaled)\n",
    "    #print (\"accel_zout: \", accel_zout, \" scaled: \", accel_zout_scaled)\n",
    "\n",
    "    #우리가 정답이랑 비교해봐야할 값인 것 같음\n",
    "        xRotation = get_x_rotation(accel_xout_scaled, accel_yout_scaled, accel_zout_scaled\n",
    "        yRotation = get_y_rotation(accel_xout_scaled, accel_yout_scaled, accel_zout_scaled)\n",
    "    #print (\"x rotation: \" , get_x_rotation(accel_xout_scaled, accel_yout_scaled, accel_zout_scaled))\n",
    "    #print (\"y rotation: \" , get_y_rotation(accel_xout_scaled, accel_yout_scaled, accel_zout_scaled))\n",
    "        print(xRotation, yRotation)\n",
    "        time.sleep(1)\n",
    "    #나는 여기까지인거 같아...\n",
    "        if case1==0:\n",
    "        #x이상\n",
    "            if case2==0:\n",
    "            #y이상\n",
    "                if xRotation>answerX and yRotation>answerY:\n",
    "                    print(\"■ \",end='')\n",
    "                    break\n",
    "            elif case2==1:\n",
    "            #y이하\n",
    "                if xRotation>answerX and yRotation<answerY:\n",
    "                    print(\"■ \",end='')\n",
    "                    break\n",
    "        elif case1==1:\n",
    "        #x이하\n",
    "            if case2==0:\n",
    "            #y이상\n",
    "                if xRotation<answerX and yRotation>answerY:\n",
    "                    print(\"■ \",end='')\n",
    "                    break\n",
    "            elif case2==1:\n",
    "            #y이하\n",
    "                if xRotation<answerX and yRotation<answerY:\n",
    "                    print(\"■ \",end='')\n",
    "                    break\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def Button(size):\n",
    "    #버튼센서\n",
    "    global LedOn\n",
    "    answer = []\n",
    "    button_on = [False,False,False]\n",
    "    condition = False\n",
    "    for i in range(size):\n",
    "        index = randint(0,2)\n",
    "        answer.append(randint(0,3)-1)\n",
    "        button_on[index] = True \n",
    "    print(\"눌러야 하는 버튼의 수는 %d개\"%(np.count_nonzero(button_on)))\n",
    "    if mode == 2:\n",
    "        condition = True\n",
    "    while True:\n",
    "        check = True\n",
    "        for i in range(size):\n",
    "            a = [GPIO.input(ButtonPin[0]),GPIO.input(ButtonPin[1]),GPIO.input(ButtonPin[2])]\n",
    "            time.sleep(1)\n",
    "            if condition == False:\n",
    "                #쉬움모드일 때\n",
    "                if a[answer[index]] == 1:\n",
    "                    print(\"■ \",end='')\n",
    "                else:\n",
    "                    check = False\n",
    "                    print(\"□ \",end='')\n",
    "            else:\n",
    "                #중간모드일 때\n",
    "                if a[answerp[index]]==1:\n",
    "                    check = False\n",
    "                    print(\"□ \",end='')\n",
    "                else:\n",
    "                    print(\"■ \",end='')\n",
    "        if check:\n",
    "            break\n",
    "            \n",
    "            \n",
    "            \n",
    "    while True:\n",
    "        print(GPIO.input(17))\n",
    "        time.sleep(1)\n",
    "\n",
    "def Goughness(size):\n",
    "    #조도센서\n",
    "    #1과 0사이의 값으로 나옴\n",
    "    while True:\n",
    "        print(GPIO.input(GHPin))\n",
    "        time.sleep(1)\n",
    "\n",
    "\n",
    "def LED():\n",
    "    #random으로 3개중 불을 키고, 끈다\n",
    "    global LedOn\n",
    "    pins = [5,6,13]\n",
    "    on = [random()<0.5,random()<0.5,random()<0.5]\n",
    "    LedOn = on#LED의 켜져있는 정보를 저장함                           \n",
    "    for i in range(len(on)):\n",
    "        if on[i]:\n",
    "            GPIO.output(pins[i],GPIO.HIGH)\n",
    "        else:\n",
    "            GPIO.output(pins[i],GPIO.LOW)\n",
    "\n",
    "        \n",
    "def Piezo(size):\n",
    "    #부저\n",
    "    list = []\n",
    "    for i in range(size):\n",
    "        list.append(randint(0,len(scale)-1))\n",
    "    return list\n",
    "\n",
    "def playMusic(list):\n",
    "    global scale\n",
    "    p = GPIO.PWM(PiezoPin,100)\n",
    "    p.start(100)\n",
    "    p.ChangeDutyCycle(90)\n",
    "    for i in range(len(list)):\n",
    "        p.ChangeFrequency(scale[list[i]])\n",
    "        if len(list) == 1:\n",
    "            time.sleep(1)\n",
    "        else:\n",
    "            if mode == 1:\n",
    "                time.sleep(1)\n",
    "            elif mode == 2:\n",
    "                time.sleep(0.5)\n",
    "            else:\n",
    "                time.sleep(0.3)\n",
    "    p.stop()\n",
    "    GPIO.output(PiezoPin,GPIO.LOW)\n",
    "                                   \n",
    "def MusicGame(size):\n",
    "    #부저와 버튼으로 게임하기\n",
    "    list = Piezo(size)\n",
    "    while True:\n",
    "        playMusic(list)\n",
    "        check = True\n",
    "        for i in range(size):\n",
    "            a = [GPIO.input(ButtonPin[0]),GPIO.input(ButtonPin[1]),GPIO.input(ButtonPin[2])]\n",
    "            a = [a.argmax()]\n",
    "            playMusic(a)\n",
    "            if a[list[i]]!=1:\n",
    "                check = False\n",
    "        if check:\n",
    "            break\n",
    "\n",
    "def GameStart(size):\n",
    "    global timer\n",
    "    game = makeGame(size)\n",
    "    clear = np.full(size,False)\n",
    "    for i in range(size):\n",
    "        game[i](size)\n",
    "        clear[i] = True\n",
    "    if timer != None and sum(clear)==size:\n",
    "        #시간 제한이 끝나기 전에 clear한 경우\n",
    "        timer.cancel()#타이머를 멈춘다\n",
    "        GameOver()\n",
    "        \n",
    "    \n",
    "def GameOver():\n",
    "    #게임Over(종료)\n",
    "    global timer\n",
    "    timer = None\n",
    "    clearSetting()\n",
    "    print(\"OVER!\")\n",
    "    \n",
    "if __name__ == '__main__':\n",
    "    try:\n",
    "        print(\"메뉴\")\n",
    "        initSetting()\n",
    "        menuSelect()#메뉴를 선택한다\n",
    "        Question = [InfraredRay,Button,MPU6050,Goughness,MusicGame]#각각의 센서의 정보가 저장된 배열\n",
    "        timer = threading.Timer(90,GameOver)#90초 후에 GameOver함수실행(1분 30초)\n",
    "        timer.start()\n",
    "        if mode == 1 and mode == 2:\n",
    "            GameStart(3)\n",
    "        else:\n",
    "            GameStart(4)\n",
    "        \n",
    "    except KeyboardInterrupt:\n",
    "        clearSetting()\n",
    "        GPIO.cleanup()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
